services:
  next:
    build:
      context: ./
      dockerfile: ./docker/next/Dockerfile
    container_name: scheduler-front
    hostname: scheduler-front
    depends_on:
      - api
      - db
    tty: true
    environment:
      - NODE_ENV=development
    volumes:
      - node_modules:/usr/src/next/node_modules
      - ./next:/usr/src/next
      - ./scripts:/usr/src/scripts
    ports:
      - 3000:3000
    networks:
      - scheduler-front
    working_dir: /usr/src/scripts
    command: ["sh", "./run_next.sh"]
  api:
    image: "fastapi_starter"
    container_name: "fastapi_starter"
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    ports:
      - "8888:8000"
    networks:
      - scheduler-front
      - scheduler-back
    volumes:
      - ./app:/usr/src/app/app:cached
      - ./db:/usr/src/app/db:cached
      - ./scripts:/usr/src/app/scripts:cached
    working_dir: /usr/src/app/scripts
    command: bash -c "./run.sh"
    environment:
      APP_ENV: "development"
      TZ: "Asia/Tokyo"
    env_file:
      - .env.dev
  db:
    image: "fastapi_db"
    container_name: "fastapi_db"
    build:
      context: ./docker/test-db
      dockerfile: Dockerfile
    restart: always
    tty: true
    ports:
      - 5432:5432
    networks:
      - scheduler-back
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    environment:
      APP_ENV: "development"
      TZ: "Asia/Tokyo"
    env_file:
      - .env.dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  node_modules:
  postgres_volume:

networks:
  scheduler-front:
    name: scheduler-front
    driver: bridge
    external: true
  scheduler-back:
    name: scheduler-back
    driver: bridge
    external: true
